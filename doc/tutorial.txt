Olá! Seja bem-vind@ ao PI (Propagador de Incerteza)

Como vocês sabem (ou vão aprender agora), em ensaios de laboratório, devemos realizar os cálculos de propagação de incerteza no laboratório. Esses cálculos envolvem tirar várias derivadas de uma função, e isso pode consumir muito tempo, e frequentemente é muito chato! Por sorte, o PI faz todos esses cálculos por você, junto com algumas funcionalidades extras!

Para aprender a usar o programa, precisamos apenas de passar por alguns tópicos:


I) como colocar os dados em um arquivo txt
II) como escrever a função final no arquivo txt
III) como utilizar o exe?
IV) como fazer um fit? 

************************************** I : como colocar os dados brutos em um arquivo .txt? ***************************


cada variável é composta de:

a) um nome, simbolizado por um caractere ascii. prefira letras simples (a, b, c...), evite simbolos estranhos (@, #, $, ...) e jamais utilise caracteres não-ascii (à, â, ã,...)

b) uma incerteza instrumental; um número real, a incerteza do equipamento utilizado para medir.

c) medidas; aquelas que o seu equipamento registra nos experimentos, e que pode ser mais de uma.

dessa maneira, colocaremos, no arquivo, a) o nome da variável, b) sua incerteza instrumental, separada por enter ou espaço, c) suas medidas, entre colcheter e separadas por caracteres brancos(espaço, enter, tab...)
-------------------------------------------
velocidade 0.05 [1.33 1.32 1.45]

tempo1 0.001 [0.067 0.045 0.039]

velocidade*tempo1 (expressão que combina as variáveis)
---------------------------------------------

IMPORTANTE:
* separe as casas decimais com pontos ( . ), nunca com vírgula.
** escolha unidades convenientes para escrevê-las na tabela. prefira 0.13 mm, ao invés de 0.00013cm. Não perca as unidades de vista! 


******************************* II : como escrever a função final no arquivo txt? *********************************************


Agora é a hora de escrever uma função, isto é, a expressão final, que usa as outras variáveis e suas incertezas. Para que não ocorra erros com a formatação, por favor, memorize as seguintes regras:

i) o logaritmo natural, isto é, de base e, é escrito como ln.
ii) a multiplicação se escreve com *, e a exponenciação com ^. Não temos o comando "sqrt".
iii) funções trigonométricas podem ser escritos na convenção brasileira ou americana: sin, Sin, sen e Sen são todos válidos.
vi) podemos usar, até a presente versão, os operadores + - * / ^ (mais, menos, vezes, dividido, elevado a)
v) as funções já implementadas são: sin(x); cos(x); tan(x); asin(x); acos(x); atan(x); ln(x); exp(x); Caso sinta a falta de alguma função, contate o desenvolvedor do código. :)
vi) Caso a sua expressão use um operador ou função desconhecidos, ou esteja com uma ambiguidade nos parênteses, ou por qualquer motivo não esteja formatada de uma forma válida, o programa retornará "Nan".
vii) o asterisco é necessário em toda e qualquer multiplicação!
iix) o programa só reconhece parênteses, nunca chave nem colchete!

essencialmente, escreva como se escreve na calculadora!

seguem alguns exemplos de expressões corretas e erradas:

a+b                     correto!
a/b                     correto!
(a)(b) ou (2)(3)        ERRADO!
(a)*(b) ou (2)*(3)      correto!
(a)+(b)                 correto! 
(a+b)*c                 correto!
a+(b/c)                 correto!
a+b+c                   correto!
a+(b+c)                 correto!
a*b*b                   correto!
a*(b*c)                 correto!
a^(1/2)                 correto!
Sen(a)                  correto!
Sena                    ERRADO!
sin(a)+Cos(b)           correto!
2*Tan(a)                correto!
2Tan(a)                 ERRADO!
ab                      ERRADO!
2a			ERRADO!

IMPORTANTE: 
*o número de euler e pi já estão implementados aqui, com um bom número de casas decimais. basta representá-los por "e" e "pi", caso já não existam variáveis com esses nomes.

******************************* III : como utilizar o .exe? *********************************************************

Agora que toda a tabela foi escrita, é simples! basta abrir o arquivo .exe, e digitar o nome do arquivo .txt com os dados brutos. Isso vai gerar um arquivo .txt com os seus dados já tratados, com média e incerteza final de cada variável! A incerteza é calculada considerando a incerteza instrumental que você forneceu, e o desvio-padrão das várias medida que você registrou. Segue um arquivo teste.txt, e o resultado gerado pelo programa:


-------------------------------------------------------------------------------------------------
a 0.1 [1 2 3]

a+ 1
a+   1*2
a+1*2		+3+4+5*2
a+1
2
(2)(3)
()
a+(2
sin(a))



	
a+(1+2)  
a+(1	+2 *3)
a*(1)
a*(1+2*3)+2*(a*4+5)
sin(a)
ln(a+1)
ln(a^2)
(Sen(a)+(((cos(a*1)))))*aTg(ln(a^2)+atan((1*ln(1/(sen(a)^2)))) )
a*pi
a*e
pi+e

-------------------------------------------------------------------------------------------------

ARQUIVO COM OS DADOS PROCESSADOS

-------------------------------------------------------------------------------------------------
a 2 ± 0.585946527708231524201459849976458826859

a+1

3 ± 0.5859465277082315892535901991067248673062

a+1*2

4 ± 0.5859465277082305484195046130224682201515

a+1*2+3+4+5*2

21 ± 0.5859465277082305484195046130224682201515

a+1

3 ± 0.5859465277082315892535901991067248673062

2

2 ± 0

(2)(3)

nan ± nan

()

nan ± nan

a+(2

nan ± nan

sin(a))

nan ± nan

a+(1+2)

5 ± 0.5859465277082305484195046130224682201515

a+(1+2*3)

9 ± 0.5859465277082305484195046130224682201515

a*(1)

2 ± 0.5859465277082315892535901991067248673062

a*(1+2*3)+2*(a*4+5)

40 ± 8.78919791562347488007161944167933143035

sin(a)

0.9092974268256816953765082900407179522517 ± 0.2438723127963764610015833661504913720819

ln(a+1)

1.09861228866810969136049574990110500039 ± 0.1953115356397411159152140147643450518444

ln(a^2)

1.386294361119890618857380948369950601773 ± 0.5859286467672352286570162938073025316044

(Sen(a)+(((cos(a*1)))))*aTg(ln(a^2)+atan((1*ln(1/(sen(a)^2)))))

0.4955520859722902291379445505192791188165 ± 0.6240316172207188915536241191617250478885

a*pi

6.283185307179586477025617918812372408865 ± 1.840805306844627627625189669746674780981

a*e

5.436563656918090470856336215987880677858 ± 1.592767798717959647626478403292793473156

pi+e

5.859874482048838473940977067400126543362 ± 0

-------------------------------------------------------------------------------------------------


Várias casas decimais são colocadas para evitar erros de arredondamento

outro exemplo: arquivo de texto chamado "exemplo.txt":

##########################################################
velocidade 0.01 [2.7 2.8 2.7]

tempo1 0.0001 [2.7756]

tempo2 0.0001 [2.7689 2.8790]

velocidade*tempo1

velocidade*tempo2

(velocidade*tempo1)/(velocidade*tempo2)

################################################################

arquivo chamado "exemplo_final.txt":

################################################################

velocidade 2.733333333333333333347789362299806725787 ± 0.03480102169636849954628796295630355217554
tempo1 2.775599999999999999925753835228192656359 ± 0.0001000000000000000000011434944787933054577
tempo2 2.823950000000000000108246744900952762691 ± 0.05505009082644641521899799008199494210203

velocidade*tempo1

7.58663999999999999999944488848768742173 ± 0.09659410254829798585539174168856924040938

velocidade*tempo2

7.718796666666666667078189334461058024317 ± 0.1797207156696343398669503746423181667069

(velocidade*tempo1)/(velocidade*tempo2)

0.9828785920430602524510907413990423719952 ± 0.01915944311359125512766261780622789601125

################################################################

Como você pode ver, é fácil e rápido!


******************************************* IV : como fazer um fit? ******************************************************

No analyser, temos dois tipos de fit: fit comum e fit simples. O fit simples é quando cada valor medido tem uma mesma incerteza, e o fit comum do contrário. para o fit simples,segue-se sempre o mesmo algoritmo:

para o eixo x: nome_eixo_x incerteza(um número) [valor1 valor2 ... valorn]
para o eixo y: nome_eixo_x incerteza(um número) [valor1 valor2 ... valorn]

exemplo:

temperatura 0.01 [16 16.1 16.2 16.32 16.45 17]

pressao 0.005 [500 504 512 536 530 550]

No terminal do analyser, insira o nome do arquivo, espaço, e o comando +simple_linear_fit para fit linear, e +simple_quadratic_fit para fit quadrático.

****************************************(no terminal)
type exit to leave
enter file name with table:

teste2.txt +simple_linear_fit
file analysed successfully!  

****************************************

e o resultado apresentado é:

angular 50.37846273897775759356698621616033051396 ± 0.6894383319182108485609003500904634620383
linear -301.4359734685913549123714716415634029545 ± 11.27072536702593627804674936143669583544
error 8.071966585483340480937364258551269813324 ± 0

"error" equivale à raiz quadrada do somatório (1/(n-1))*(yi-(angular*xi+linear))^2, em que fazemos o fit Y=angular*X+linear+erro. (Por favor, se familiarize com o conceito de fit linear antes de usar essa funcionalidade)

Para fazer um fit normal, basta enunciar as variáveis normalmente, como na tabela normal, como no seguinte exemplo:

x1 0.001 [1]

x2 0.002 [2]

x3 0.001 [3]

y1 0.001 [3]

y2 0.002 [6]

y3 0.01 [9]

-linear/angular

IMPORTANTE: em ambos os casos, os valores do eixo x sempre vêm primeiro!

Observe também que, em ambos os casos, os coeficientes do fit são variáveis comuns, e podem ser usadas nas expressões da função, como -linear/angular ou a_2-a_1*a_0. (lembrando que o fit linear é da forma y=x*angular+linear e o quadrático é da forma y=a_2*x²+a_1*x+a_0) 


 Você chegou ao fim desse tutorial! Agora, você está pronto para utilizar o PI! Se estiver interessado em novas atualizações do programa, tiver dúvidas ou sugestões, contate o desenvolvedor desse programa!
